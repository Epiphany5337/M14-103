# 加载所需包
library(tidyverse)
library(ggplot2)
library(readr)
library(showtext)

# 添加 Times New Roman 字体
showtext_auto()
font_add("Times New Roman", regular = "C:/Windows/Fonts/times.ttf")  # 确保路径正确

# 读取数据
data <- read_tsv("你的路径.txt")  # 替换成你的文件路径

# 整理数据：长格式 + 分组信息
data_long <- data %>%
  pivot_longer(cols = -Strain, names_to = "TimeRep", values_to = "Value") %>%
  separate(TimeRep, into = c("Time", "Rep"), sep = "-") %>%
  mutate(Time = factor(Time, levels = c("1h", "3h")))

# 计算平均值、SD、SE
summary_data <- data_long %>%
  group_by(Strain, Time) %>%
  summarise(
    Mean = mean(Value),
    SD = sd(Value),
    SE = SD / sqrt(n()),
    .groups = "drop"
  )

# 获取 LGG 数据
LGG_data <- data_long %>% filter(Strain == "LGG")

# 显著性检验：自动判断是否等方差（F检验），然后进行相应的 t 检验
p_data <- data_long %>%
  filter(Strain != "LGG") %>%
  group_by(Strain, Time) %>%
  summarise(
    result = list({
      test_vals <- Value
      LGG_vals <- LGG_data %>% filter(Time == unique(Time)) %>% pull(Value)
      
      # 检验是否等方差
      equal_var <- tryCatch({
        var.test(test_vals, LGG_vals)$p.value > 0.05
      }, error = function(e) NA)

      # 根据等方差性判断使用哪种 t 检验
      t_res <- tryCatch({
        t.test(test_vals, LGG_vals, var.equal = equal_var)
      }, error = function(e) NA)
      
      list(
        p_value = ifelse(is.list(t_res), t_res$p.value, NA),
        equal_var = equal_var,
        test_type = ifelse(isTRUE(equal_var), "Pooled", "Welch")
      )
    }),
    .groups = "drop"
  ) %>%
  unnest_wider(result) %>%
  mutate(
    star = case_when(
      is.na(p_value) ~ "",
      p_value < 0.001 ~ "***",
      p_value < 0.01 ~ "**",
      p_value < 0.05 ~ "*",
      TRUE ~ ""
    )
  )


# 合并显著性数据，并计算图中用到的百分比值
plot_data <- summary_data %>%
  left_join(p_data, by = c("Strain", "Time")) %>%
  mutate(
    Mean_pct = Mean * 100,
    SE_pct = SE * 100,
    label_y = Mean_pct + SE_pct + 5  # 星号位置
  )

# 计算自动 y 轴上限
max_y <- max(plot_data$label_y, na.rm = TRUE)
y_breaks <- seq(25, ceiling(max_y / 25) * 25, 25)
y_limit <- ceiling(max_y / 5) * 5

# 字体主题设置
theme_times <- theme(
  text = element_text(family = "Times New Roman"),
  axis.text.x = element_text(angle = 45, hjust = 1, size = 12),
  axis.text.y = element_text(size = 12),
  axis.title = element_text(size = 14),
  legend.title = element_text(size = 13),
  legend.text = element_text(size = 12),
  axis.line = element_line(),
  panel.border = element_blank(),
  panel.grid = element_blank(),
  axis.ticks = element_line(),
  axis.title.x = element_text(margin = margin(t = 10))
)

# 设置 dodge 保持显著性与柱图对齐
dodge <- position_dodge(width = 0.8)

# 绘图
ggplot(plot_data, aes(x = Strain, y = Mean_pct, fill = Time)) +
  geom_bar(stat = "identity", position = dodge, width = 0.7) +
  geom_errorbar(aes(ymin = Mean_pct - SE_pct, ymax = Mean_pct + SE_pct),
                position = dodge, width = 0.2, color = "black") +
  geom_text(aes(label = star, y = label_y),
            position = dodge, vjust = 0,
            size = 4.5, family = "Times New Roman") +
  scale_fill_brewer(palette = "Set1", name = "Time") +
  scale_y_continuous(
    name = "Relative survival rate (%)",
    breaks = y_breaks,
    limits = c(0, y_limit),
    expand = expansion(mult = c(0, 0.05))
  ) +
  labs(x = "Strain") +
  theme_bw() +
  theme_times
